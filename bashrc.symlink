#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '

# export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0

alias l='ls --color=auto'
alias ll='ls -l'
alias lla='ls -la'
alias gs='git status'
alias gd='git diff'
alias gb='git branch'
alias gwt='git worktree'
alias gco='git checkout'
alias gpull='git pull'
alias gpush='git push'

alias fcd='cd $(fd -t d --hidden --follow --exclude \".git\" | fzf)'
alias ff='$(fd -t f -H -I | fzf)'
alias fh='$(history | fzf)'

alias work='cd /mnt/c/work/workspace'

# bind -x '"\eW":"cd $(fd -t d --hidden --follow --exclude \".git\" | fzf)"'
# bind -x '"^t":"$(fd -t f -H -I | fzf)"'
# bind -x '"\C-t":"$(fd -t f -H -I | fzf)"'
# bind -x '"\C-r":"(history | fzf)"'
# bind -x '"\ec":"cd $(fd -t d --hidden --follow --exclude \".git\" | fzf)"'

[ -f ~/.fzf.bash ] && source ~/.fzf.bash



###---------- PROMPT ----------###

function parse_git_dirty {
  STATUS="$(git status 2> /dev/null)"
  if [[ $? -ne 0 ]]; then printf ""; return; else printf "["; fi
  if echo ${STATUS} | grep -c "renamed:"         &> /dev/null; then printf ">"; else printf ""; fi
  if echo ${STATUS} | grep -c "branch is ahead:" &> /dev/null; then printf "!"; else printf ""; fi
  if echo ${STATUS} | grep -c "new file::"       &> /dev/null; then printf "+"; else printf ""; fi
  if echo ${STATUS} | grep -c "Untracked files:" &> /dev/null; then printf "?"; else printf ""; fi
  if echo ${STATUS} | grep -c "modified:"        &> /dev/null; then printf "*"; else printf ""; fi
  if echo ${STATUS} | grep -c "deleted:"         &> /dev/null; then printf "-"; else printf ""; fi
  printf "]"
}

parse_git_branch() {
  # Long form
  git rev-parse --abbrev-ref HEAD 2> /dev/null
 # Short form
  # git rev-parse --abbrev-ref HEAD 2> /dev/null | sed -e 's/.*\/\(.*\)/\1/'
}

prompt_comment() {
    DIR="$HOME/.local/share/promptcomments/"
    MESSAGE="$(find "$DIR"/*.txt | shuf -n1)"
    cat "$MESSAGE"
}

# PS1="\e[00;36m\]┌─[ \e[00;37m\]\T \d \e[00;36m\]]──\e[00;31m\]>\e[00;37m\] \u\e[00;31m\]@\e[00;37m\]\h\n\e[00;36m\]|\n\e[00;36m\]└────\e[00;31m\]> \e[00;37m\]\w \e[00;31m\]\$ \e[01;37m\]"
# PS1="\[\e[01;37m\]{ \[\e[01;34m\]\w \[\e[01;37m\]} \[\e[01;35m\]\[\$ \]\[\e[01;37m\]"
# PS1="\[\e[1;36m\]\$(parse_git_branch)\[\033[31m\]\$(parse_git_dirty)\[\033[00m\]\n\w\[\e[1;37m\] \[\e[1;36m\]\[\e[1;37m\] "
PS1="\[\033[00m\]\w\[\e[1;37m\]\[\e[1;36m\]\[\e[1;36m\] \$(parse_git_branch)\[\033[31m\]\$(parse_git_dirty) \[\e[1;37m\] "

set nocompatible
let mapleader=" "
set shiftwidth=4 tabstop=4 softtabstop=4 expandtab smarttab autoindent smartindent
set ignorecase smartcase incsearch showmatch hlsearch
set wrap formatoptions-=t "turn off Auto-wrap text using textwidth
set scrolloff=2
set noshowmode
" set shortmess+=c
set nu rnu
set mouse=a
set hidden
" set autochdir " auto change cwd
" Save when losing focus
au FocusLost * :silent! wall
" Resize splits when the window is resized
au VimResized * :wincmd =
" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800
set backspace=indent,eol,start " set backspace=indent,eol,start; eol让退格键可以退到上一行

" change cursor while in normal/insert mode
let &t_SI="\e[6 q"
let &t_EI="\e[2 q"

set completeopt=menuone,noinsert,noselect
" set signcolumn=yes
set ttimeout ttimeoutlen=10
set updatetime=100
set encoding=UTF-8
set clipboard+=unnamedplus " Copy paste between vim and everything else
set nojoinspaces " don't autoinsert two spaces after '.', '?', '!' for join command
" set showcmd " extra info at end of command line
" set wildignore+=*/node_modules/**
filetype plugin indent on

" syntax highlighting of search results
au ColorScheme * highlight Search guibg=NONE guifg=Cyan gui=italic,underline,bold
" highlight Comment cterm=italic gui=italic

" Make it obvious where 80 characters is
set textwidth=80
" 80字符竖线指示
" set colorcolumn=+1
" set colorcolumn=80
" highlight ColorColumn guibg=#181818

" Line Return
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif " make cursor remain the position of last quit

" Backups
set backup                        " enable backups
set noswapfile
silent !mkdir -p ~/.vim/tmp/backup
silent !mkdir -p ~/.vim/tmp/undo
"silent !mkdir -p ~/.vim/tmp/sessions
set backupdir=~/.vim/tmp/backup,.
set directory=~/.vim/tmp/backup,.
" use for u(undo) and Ctrl-r(redo)
if has('persistent_undo')
    set undofile
    set undodir=~/.vim/tmp/undo,.
endif

" status line
set laststatus=0  " disable status line
" set showtabline=0 " disable tab line
function! ToggleHiddenStatusLine()
    if &laststatus < 2
        set laststatus=2
        " set showtabline=2
    else
        set laststatus=0
        " set showtabline=0
    endif
endfunction
nnoremap <Leader>. :call ToggleHiddenStatusLine()<CR>

" for ctags
set tags=tags;/
nnoremap <Leader>cg :!ctags --extra=+q --languages=java -R .
" nnoremap <Leader>cg :!ctags --extra=+q --exclude=android-dto --languages=java -R .

" enable alt key in vim8, execute "set <M-h>=\eh"
for i in ['i', 'h', 'j', 'k', 'l', 'f', 'b', 's', 'r', 'q', 'L', 'F', 'A', 'G', 'N', 'E', 'H', 'T', 'C', 'x', ',', '.']
    exe "set <M-" . i . ">=\e" . i
endfor

" Cursor Movement
" insert mode bindings
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <M-f> <S-Right>
inoremap <M-b> <S-Left>
inoremap <C-g> <Esc>
map <C-g> <Esc>
" inoremap <C-k> <C-o>D
" inoremap <C-n> <Down>
" inoremap <C-p> <Up>

" command line mode bindings
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <M-f> <S-Right>
cnoremap <M-b> <S-Left>

" Don't move on *
nnoremap <silent> * mm*`m
" Visual Mode */# from Scrooloose
function! s:VSetSearch()
    let temp = @@
    norm! gvy
    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" Save & quit
nnoremap s <nop>
nnoremap R <nop>
nnoremap Q <nop>
nnoremap <C-q> :q<CR>
inoremap <C-q> <Esc>:q<CR>
nnoremap <Leader>qq :q!<CR>
" quit all the other windows except for current  " (:h only)(<C-w>o)
nnoremap <Leader>qw :only<CR>
" quit all the other tabs except for current  " (:h tabonly)
nnoremap <Leader>qt :tabonly<CR>
nnoremap <C-M-q> :qa<CR>
inoremap <C-M-q> :qa<CR>
inoremap <C-s> <Esc>:w<CR>
nnoremap <C-s> :w<CR>

" Source
nnoremap <M-s> <nop>
nnoremap <M-s>i :source $MYVIMRC<CR>
nnoremap <M-s>. :so %<CR>
vnoremap <M-s>v y:execute @@<CR>:echo 'Sourced selection.'<CR>
nnoremap <M-s>L ^vg_y:execute @@<CR>:echo 'Sourced line.'<CR>

" Save file as sudo on files that require root permission(by typing [Ctrl-s !]), note the '' symbol is type through Ctrl-v ctrl-s
cnoremap ! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" normal mode bindings
nnoremap <Down> :res +1<CR>
nnoremap <Up> :res -1<CR>
nnoremap <Left> :vertical resize-1<CR>
nnoremap <Right> :vertical resize+1<CR>

" Basic Mappings
nnoremap <Leader><Space> :nohlsearch<CR>

" insert a <++>
inoremap <M-i> <++>
" jump to next <++> and replace it
nnoremap <M-Space> <Esc>/<++><CR>:nohlsearch<CR>c4l
inoremap <M-Space> <Esc>/<++><CR>:nohlsearch<CR>c4l

" move selected lines up/down and keep selected
vnoremap J :move '>+1<CR>gv=gv
vnoremap K :move '<-2<CR>gv=gv
" indent blocks and keep selected
vnoremap H <gv
vnoremap L >gv
" inoremap <C-J> <Esc>mz:m .+1<CR>==`za
" inoremap <C-K> <Esc>mz:m .-2<CR>==`za

" copy from rigister to the vim cmdline
nnoremap <Leader>cp :<C-r>"
" Clean trailing whitespace
nnoremap <Leader>ww mz:%s/\s\+$//<cr>:let @/=''<CR>`z
" Panic Button
nnoremap <M-x>e mzggg?G`z
" Rot13 encode {motion} text.
vnoremap <M-x>e mzg?`z
" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap <Leader>vv ^vg_
" Perform dot commands over visual blocks:
vnoremap . :normal .<CR>
" Replace all is aliased to R.
nnoremap R :%s//g<Left><Left>

" Window Management
" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)
nnoremap <m-s>h :set nosplitright<CR>:vsplit<CR>
nnoremap <m-s>j :set splitbelow<CR>:split<CR>
nnoremap <m-s>k :set nosplitbelow<CR>:split<CR>
nnoremap <m-s>l :set splitright<CR>:vsplit<CR>

" Place the two screens side by side (vertical)
nnoremap <M-s>m <C-w>t<C-w>H
" Place the two screens up and down (horizontal)
nnoremap <M-s>n <C-w>t<C-w>K

" Rotate screens
" nnoremap <M-s>rm <C-w>b<C-w>H
" nnoremap <M-s>rn <C-w>b<C-w>K

" Use <ALT> + new arrow keys for moving the cursor around windows
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

" Use shift arrow keys for moving the windows
" nnoremap <C-M-h> <C-w>H
" nnoremap <C-M-j> <C-w>J
" nnoremap <C-M-k> <C-w>K
" nnoremap <C-M-l> <C-w>L

" Tab Management
" Create a new tab
" nnoremap <M-n> :tabe<CR>
" nnoremap <M-q> :tabclose<CR>
" " nnoremap <M-n> :tabnew
" " switching tabs
" nnoremap <M-,> :-tabnext<CR>
" nnoremap <M-.> :+tabnext<CR>
" " Move the tabs
" nnoremap <M-<> :-tabmove<CR>
" nnoremap <M->> :+tabmove<CR>
" " Map alt-x keys to jump to a tab
" for i in range(1, 8)
"     exe "nnoremap <M-" . i . "> :tabnext " . i . "<CR>"
" endfor
" nnoremap <M-9> :tablast<CR>

" Buffer Management
nnoremap <M-q> :bd<CR>
" " switching buffer
nnoremap <M-,> :bp<CR>
nnoremap <M-.> :bn<CR>

" Clipboard
set clipboard^=unnamed,unnnamedplus

" use the system clipboard
" might need to install a system clipboard tool such as : sudo pacman -S xclip / xsel
" let @+=@*<CR> for copying to both the clipboard and primary selection.
vnoremap Y "*y :let @+=@*<CR>
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P

" RestoreRegister
" prevent replacing register on paste
function! RestoreRegister()
    let @" = s:restore_reg
    return ''
endfunction
function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<CR>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Compile Function
" noremap <M-r> :call CompileRunGcc()<CR>
nnoremap <M-r> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        " exec "!g++ % -o %<"
        " exec "!gcc % -o %<"
        " exec "!time ./%<"
        :FloatermNew --autoclose=0 gcc % -o %< && time ./%<
    elseif &filetype == 'cpp'
        " set splitbelow
        " exec "!g++ -std=c++11 % -Wall -o %<"
        " :sp
        " :res -15
        " :term ./%<
        :FloatermNew --autoclose=0 g++ -std=c++11 % -Wall -o %< && ./%<
    elseif &filetype == 'java'
        " ==== compile & run ===
        " exec "!javac % && time java %<"
        " :FloatermNew --width=80 --height=40 javac % && time java %<
        :FloatermNew --autoclose=0 javac % && time java %<
        " === make & run ===
        " exec 'set makeprg=javac\ -g\ %'
        " exec "make"
        " exec "!time java %<"
        " === make ===
        " exec "make"
        " === for debug ===
        " exec "!time java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=y %<"
    elseif &filetype == 'rust'
        :FloatermNew --autoclose=0 rustc % && time ./%<
    elseif (&filetype == 'sh' || &filetype == 'zsh')
        " :!time bash %
        :FloatermNew --autoclose=0 time bash %
    elseif &filetype == 'python'
        " set splitbelow
        " :sp
        " :term python3 %
        :FloatermNew --autoclose=0 python3 %
    elseif &filetype == 'html'
        silent! exec "!".g:mkdp_browser." % &"
    elseif &filetype == 'vimwiki'
        exec "MarkdownPreview"
    elseif &filetype == 'markdown'
        exec "MarkdownPreview"
    elseif &filetype == 'tex'
        " silent! exec "VimtexStop"
        " silent! exec "VimtexCompile"
        silent! exec "LLPStartPreview"
    elseif &filetype == 'dart'
        CocCommand flutter.run -d iPhone\ 11\ Pro
        CocCommand flutter.dev.openDevLog
    elseif &filetype == 'javascript'
        " set splitbelow
        " :sp
        " :term export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings .
        " :FloatermNew export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings .
        :FloatermNew --autoclose=0 export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings %
    elseif &filetype == 'go'
        " set splitbelow
        " :sp
        " :term go run .
        :FloatermNew --autoclose=0 time go run %
    elseif &filetype == 'nasm'
        exec "!nasm -f bin % -o %<.bin"
    elseif &filetype == 'lua'
        :FloatermNew --autoclose=0 time lua %
    endif
endfunc

" Openning Files
" Open the vimrc file anytime
nnoremap <Leader>fi :e ~/.vim/vimrc<CR>

" work tool
" source ~/.vim/worktool.vim

" Machine Specifisc Settings
" adjust machine specific stuff
let has_machine_specific_file=1
if empty(glob('~/.vim/_machine_specific.vim'))
    let has_machine_specific_file=0
    silent! exe "!cp ~/.vim/default_configs/_machine_specific_default.vim ~/.vim/_machine_specific.vim"
endif
source ~/.vim/_machine_specific.vim

" Vim-plug Auto Load
" Auto load for the first time
if ! filereadable(system('echo -n "$HOME/.vim/autoload/plug.vim"'))
    echo "Downloading junegunn/vim-plug to manage plugins..."
    silent !mkdir -p $HOME/.vim/autoload/
    silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > $HOME/.vim/autoload/plug.vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin(system('echo -n "$HOME/.vim/plugged"'))
" PlugInstall PlugClean PlugUpdate

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" tpope plugins
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'

Plug 'justinmk/vim-sneak'

" Find & Replace
Plug 'brooth/far.vim', { 'on': ['F', 'Far', 'Fardo'] }

" Plug 'vim-test/vim-test', { 'on': ['TestNearest', 'TestLast', 'TestFile', 'TestSuite', 'TestVisit'] }
" Plug 'tweekmonster/startuptime.vim'

Plug 'junegunn/goyo.vim'

" vim-peekaboo
" Peekaboo extends " and @ in normal mode and <CTRL-R> in insert mode
" so you can see the contents of the registers.
" Plug 'junegunn/vim-peekaboo'

" Other visual enhancement
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
" Plug 'itchyny/vim-cursorword'

" Tagbar
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }

" Snippets
" Track the engine.
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" Markdown
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }

Plug 'luochen1990/rainbow'

" Other visual enhancement
Plug 'mhinz/vim-startify'
Plug 'ryanoasis/vim-devicons'

" floaterm
Plug 'voldikss/vim-floaterm'

" vim-easy-align
Plug 'junegunn/vim-easy-align'

" Plug 'dracula/vim', { 'as': 'dracula' }
" Plug 'connorholyday/vim-snazzy'
" Plug 'morhetz/gruvbox'
Plug 'sjl/badwolf'
" Plug 'kyoz/purify', { 'rtp': 'vim' }
" Plug 'srcery-colors/srcery-vim'
" Plug 'ayu-theme/ayu-vim'
" Plug 'NLKNguyen/papercolor-theme'
" Plug 'crusoexia/vim-monokai'
" Plug 'sainnhe/sonokai'

call plug#end()

" if (has("termguicolors"))
"   set termguicolors " enable true colors support
" endif
if !$TERM_PROGRAM =~ "Apple_Terminal"
  set termguicolors
endif
set background=dark " light or dark
" let g:SnazzyTransparent=1
" colorscheme snazzy
" let g:dracula_colorterm = -1
" let g:dracula_italic = 1
" colorscheme dracula
" colorscheme gruvbox
colorscheme badwolf
" colorscheme darkplus
" colorscheme purify
" colorscheme srcery
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
" colorscheme ayu
" colorscheme PaperColor
" colorscheme monokai
" colorscheme sonokai

" justinmk/vim-sneak {{{
let g:sneak#label = 1
map s <Plug>Sneak_s
map S <Plug>Sneak_S
" map f <Plug>Sneak_f
" map F <Plug>Sneak_F
" map t <Plug>Sneak_t
" map T <Plug>Sneak_T
" }}}

" Tagbar
" Tagbar might need sudo pacman -S ctags
nnoremap <silent> T :TagbarOpenAutoClose<CR>

" indentLine
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" Ultisnips
" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger='<C-\>'
let g:UltiSnipsJumpForwardTrigger='<C-j>'
let g:UltiSnipsJumpBackwardTrigger='<C-k>'
let g:UltiSnipsSnippetDirectories=["~/.vim/Ultisnips"]
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

function! s:edit_snippets(snippets_name)
    exe 'vsp ~/.vim/Ultisnips/'.a:snippets_name
endfunction
command! -bang -nargs=* EditUtilSnips call fzf#run({
            \ 'source': 'ls -1 ~/.vim/Ultisnips',
            \   'down': 20,
            \   'sink': function('<sid>edit_snippets')
            \ })

" Far.vim
nnoremap <Leader>F :F  %<left><left>

" fzf.vim
nnoremap <M-S-l> :Lines<CR>
" ripgrep
nnoremap <M-S-f> :Rg<CR>
" The Silver Searcher
nnoremap <M-S-a> :Ag<CR>
nnoremap <M-S-g> :GFiles<CR>
nnoremap <M-S-d> :GFiles?<CR>
nnoremap <M-S-n> :Files<CR>
nnoremap <M-S-e> :Buffers<CR>
nnoremap <M-S-h> :History<CR>
nnoremap <M-S-t> :BTags<CR>
nnoremap <M-S-c> :BCommits<CR>
let g:fzf_preview_window='right:60%'
let g:fzf_commits_log_options='--graph --color=always --format="%C(auto)%h%d %s %C(blue)%C(bold)%cr"'
" nnoremap <M-S-c> :Commits<CR>

" rainbow
let g:rainbow_active=1

" vim-startify
let g:startify_custom_header='startify#pad(startify#fortune#cowsay())'
" let g:startify_custom_header='startify#pad(["REMINANCE"])'
" let g:startify_custom_header=[]
let g:startify_session_autoload=1
let g:startify_session_dir='~/.vim/session'
let g:startify_lists=[
            \ { 'type': 'files',     'header': ['   Files']            },
            \ { 'type': 'dir',       'header': ['   Current Directory '. getcwd()] },
            \ { 'type': 'sessions',  'header': ['   Sessions']       },
            \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
            \ { 'type': 'commands',  'header': ['   Commands']       },
            \ ]
let g:startify_bookmarks=[
            \ { 'c': '~/dotfiles/i3/config' },
            \ { 'z': '~/.zshrc' },
            \ '~/workspace',
            \ ]

" Open Startify
nnoremap <Leader>\\ :Startify<CR>
nnoremap <Leader>ss :SSave! Session.session<CR>
nnoremap <Leader>sS :SSave!
nnoremap <Leader>sl :SLoad! Session.session<CR>
nnoremap <Leader>sL :SLoad!
nnoremap <Leader>sd :SDelete!<CR>
nnoremap <Leader>sc :SClose<CR>

" vim-surround
" cs"'    cs'</q>    cst"    ds"    ysiw]    yss)    yss"
" suppress the default key bindings
let g:surround_no_insert_mappings=1

" vim-fugitive
nnoremap <Leader>gb :Git blame<CR>
nnoremap <Leader>gc :G commit<CR>
nnoremap <Leader>gf :Git fetch<CR>
nnoremap <Leader>gF :Git pull<CR>
nnoremap <Leader>gp :Git push<CR>
nnoremap <Leader>gd :Gvdiffsplit<CR>
nnoremap <Leader>gh :diffget //2<CR>
nnoremap <Leader>gl :diffget //3<CR>
nnoremap <Leader>gs :G<CR>

" fugitive mergetool command
nnoremap <expr> <C-h> &diff ? ':diffget //2<CR>' : '<C-h>'
nnoremap <expr> <C-l> &diff ? ':diffget //3<CR>' : '<C-l>'
nnoremap <expr> <C-n> &diff ? ']c' : '<C-n>'
nnoremap <expr> <C-p> &diff ? '[c' : '<C-p>'
nnoremap <expr> <C-M-q> &diff ? ':call fugitive#DiffClose()<CR>' : ':qa<CR>'

" " normal vimdiff command
" if &diff
"     normal vimdiff command
"     nnoremap <C-h> :diffget LOCAL<CR>
"     nnoremap <C-Space> :diffget BASE<CR>
"     nnoremap <C-l> :diffget REMOTE<CR>
"     nnoremap <C-n> ]c
"     nnoremap <C-p> [c
" endif

" floaterm
" let g:floaterm_keymap_toggle='<Leader>/'
" let g:floaterm_keymap_next='<Leader>f.'
" let g:floaterm_keymap_prev='<Leader>f,'
" let g:floaterm_keymap_new='<Leader>f+'
" let g:floaterm_keymap_hide='<Leader>fh'
" let g:floaterm_keymap_show='<Leader>fs'
" let g:floaterm_keymap_kill='<Leader>fq'
" let g:floaterm_opener='edit'
" let g:floaterm_autoinsert=1
" let g:floaterm_width=0.6
" let g:floaterm_height=0.6
" " let g:floaterm_autoclose=1
" nnoremap <silent> <Leader>fP :FloatermNew --wintype=popup --height=6<CR>
" nnoremap <silent> <Leader>ff :FloatermNew fzf<CR>
" nnoremap <silent> <Leader>fg :FloatermNew lazygit<CR>
" nnoremap <silent> <Leader>fn :FloatermNew node<CR>
" nnoremap <silent> <Leader>fp :FloatermNew python<CR>
" nnoremap <silent> <Leader>fh :FloatermNew htop<CR>
" nnoremap <silent> <Leader>fd :FloatermNew ncdu<CR>
" tnoremap <silent> <C-q> <C-\><C-n>:FloatermKill<CR>

" vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga); custom:vip<Leader>ea
xmap <Leader>ea <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip); custom:<Leader>eaip
nmap <Leader>ea <Plug>(EasyAlign)

" Goyo plugin makes text more readable when writing prose:
map <leader>G :Goyo \| set bg=dark \| set linebreak<CR>
